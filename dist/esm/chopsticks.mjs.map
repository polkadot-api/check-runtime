{"version":3,"file":"chopsticks.mjs","sources":["../../src/chopsticks.ts"],"sourcesContent":["import { type Dot } from \"./types\"\nimport { createClient, type HexString } from \"polkadot-api\"\nimport { alice } from \"./alice\"\nimport { noop, toHex } from \"polkadot-api/utils\"\nimport { getSyncProvider } from \"@polkadot-api/json-rpc-provider-proxy\"\nimport { Struct, u32, u128 } from \"@polkadot-api/substrate-bindings\"\n\nif (typeof process === \"object\" && \"env\" in process)\n  process.env.LOG_LEVEL = \"fatal\"\n\nlet nActiveClients = 0\nconst getChopsticksProvider = (\n  endpoint: string,\n  {\n    wasm,\n    block,\n  }: Partial<{\n    wasm: HexString\n    block: string | number\n  }> = {},\n) =>\n  getSyncProvider(async () => {\n    const { ChopsticksProvider, setup, destroyWorker } = await import(\n      \"@acala-network/chopsticks-core\"\n    )\n    const chain = await setup({ endpoint, block, runtimeLogLevel: 0 })\n    if (wasm) chain.head.setWasm(wasm as any)\n    await chain.api.isReady\n\n    const innerProvider = new ChopsticksProvider(chain)\n    await innerProvider.isReady\n\n    return (onMessage) => {\n      nActiveClients++\n      const subscriptions = new Set<string | number>()\n      return {\n        send: async (message: string) => {\n          const parsed = JSON.parse(message)\n\n          if (parsed.method === \"chainHead_v1_follow\") {\n            const subscription = await innerProvider.subscribe(\n              \"chainHead_v1_followEvent\",\n              parsed.method,\n              parsed.params,\n              (err, result) => {\n                if (err) {\n                  console.error(err)\n                } else\n                  onMessage(\n                    JSON.stringify({\n                      jsonrpc: \"2.0\",\n                      method: \"chainHead_v1_followEvent\",\n                      params: {\n                        subscription,\n                        result,\n                      },\n                    }),\n                  )\n              },\n            )\n            subscriptions.add(subscription)\n\n            onMessage(\n              JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: parsed.id,\n                result: subscription,\n              }),\n            )\n          } else if (parsed.method === \"chainHead_v1_unfollow\") {\n            const id = parsed.params[0]\n            if (subscriptions.has(id)) {\n              subscriptions.delete(id)\n              await innerProvider.unsubscribe(\n                \"chainHead_v1_followEvent\",\n                \"chainHead_v1_unfollow\",\n                id,\n              )\n            }\n          } else {\n            onMessage(\n              JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: parsed.id,\n                result: await innerProvider.send(parsed.method, parsed.params),\n              }),\n            )\n          }\n        },\n        disconnect: () => {\n          nActiveClients--\n          const subscriptionsCopy = [...subscriptions]\n          subscriptions.clear()\n          Promise.all(\n            [...subscriptionsCopy].map((id) =>\n              innerProvider.unsubscribe(\n                \"chainHead_v1_followEvent\",\n                \"chainHead_v1_follow\",\n                id,\n              ),\n            ),\n          )\n            .catch(noop)\n            .then(() => chain.close().then(() => innerProvider.disconnect()))\n            .then(() => (!nActiveClients ? destroyWorker() : null))\n            .catch(noop)\n        },\n      }\n    }\n  })\n\nconst [encAccount] = Struct({\n  nonce: u32,\n  consumers: u32,\n  providers: u32,\n  sufficients: u32,\n  data: Struct({\n    free: u128,\n    reserved: u128,\n    frozen: u128,\n    flags: u128,\n  }),\n})\n\nexport const getChopsticksClient = async (\n  uri: string,\n  options: Partial<{\n    wasm: HexString\n    block: string | number\n  }> = {},\n) => {\n  const client = createClient(getChopsticksProvider(uri, options))\n  const api = client.getUnsafeApi<Dot>()\n  const [aliceStorageKey, ed] = await Promise.all([\n    api.query.System.Account.getKey(alice.address),\n    api.constants.Balances.ExistentialDeposit(),\n  ])\n  await client._request(\"dev_setStorage\", [\n    [\n      [\n        aliceStorageKey,\n        toHex(\n          encAccount({\n            nonce: 1,\n            consumers: 1,\n            providers: 1,\n            sufficients: 0,\n            data: {\n              free: ed * 1_000n,\n              reserved: 0n,\n              frozen: 0n,\n              flags: 170141183460469231731687303715884105728n,\n            },\n          }),\n        ),\n      ],\n    ],\n  ])\n  await client._request(\"dev_newBlock\", [])\n\n  return {\n    ...client,\n    api,\n  }\n}\n"],"names":[],"mappings":";;;;;;AAOA,IAAI,OAAO,OAAA,KAAY,QAAA,IAAY,KAAA,IAAS,OAAA;AAC1C,EAAA,OAAA,CAAQ,IAAI,SAAA,GAAY,OAAA;AAE1B,IAAI,cAAA,GAAiB,CAAA;AACrB,MAAM,qBAAA,GAAwB,CAC5B,QAAA,EACA;AAAA,EACE,IAAA;AAAA,EACA;AACF,CAAA,GAGK,EAAC,KAEN,eAAA,CAAgB,YAAY;AAC1B,EAAA,MAAM,EAAE,kBAAA,EAAoB,KAAA,EAAO,eAAc,GAAI,MAAM,OACzD,gCACF,CAAA;AACA,EAAA,MAAM,KAAA,GAAQ,MAAM,KAAA,CAAM,EAAE,UAAU,KAAA,EAAO,eAAA,EAAiB,GAAG,CAAA;AACjE,EAAA,IAAI,IAAA,EAAM,KAAA,CAAM,IAAA,CAAK,OAAA,CAAQ,IAAW,CAAA;AACxC,EAAA,MAAM,MAAM,GAAA,CAAI,OAAA;AAEhB,EAAA,MAAM,aAAA,GAAgB,IAAI,kBAAA,CAAmB,KAAK,CAAA;AAClD,EAAA,MAAM,aAAA,CAAc,OAAA;AAEpB,EAAA,OAAO,CAAC,SAAA,KAAc;AACpB,IAAA,cAAA,EAAA;AACA,IAAA,MAAM,aAAA,uBAAoB,GAAA,EAAqB;AAC/C,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,OAAO,OAAA,KAAoB;AAC/B,QAAA,MAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,OAAO,CAAA;AAEjC,QAAA,IAAI,MAAA,CAAO,WAAW,qBAAA,EAAuB;AAC3C,UAAA,MAAM,YAAA,GAAe,MAAM,aAAA,CAAc,SAAA;AAAA,YACvC,0BAAA;AAAA,YACA,MAAA,CAAO,MAAA;AAAA,YACP,MAAA,CAAO,MAAA;AAAA,YACP,CAAC,KAAK,MAAA,KAAW;AACf,cAAA,IAAI,GAAA,EAAK;AACP,gBAAA,OAAA,CAAQ,MAAM,GAAG,CAAA;AAAA,cACnB,CAAA;AACE,gBAAA,SAAA;AAAA,kBACE,KAAK,SAAA,CAAU;AAAA,oBACb,OAAA,EAAS,KAAA;AAAA,oBACT,MAAA,EAAQ,0BAAA;AAAA,oBACR,MAAA,EAAQ;AAAA,sBACN,YAAA;AAAA,sBACA;AAAA;AACF,mBACD;AAAA,iBACH;AAAA,YACJ;AAAA,WACF;AACA,UAAA,aAAA,CAAc,IAAI,YAAY,CAAA;AAE9B,UAAA,SAAA;AAAA,YACE,KAAK,SAAA,CAAU;AAAA,cACb,OAAA,EAAS,KAAA;AAAA,cACT,IAAI,MAAA,CAAO,EAAA;AAAA,cACX,MAAA,EAAQ;AAAA,aACT;AAAA,WACH;AAAA,QACF,CAAA,MAAA,IAAW,MAAA,CAAO,MAAA,KAAW,uBAAA,EAAyB;AACpD,UAAA,MAAM,EAAA,GAAK,MAAA,CAAO,MAAA,CAAO,CAAC,CAAA;AAC1B,UAAA,IAAI,aAAA,CAAc,GAAA,CAAI,EAAE,CAAA,EAAG;AACzB,YAAA,aAAA,CAAc,OAAO,EAAE,CAAA;AACvB,YAAA,MAAM,aAAA,CAAc,WAAA;AAAA,cAClB,0BAAA;AAAA,cACA,uBAAA;AAAA,cACA;AAAA,aACF;AAAA,UACF;AAAA,QACF,CAAA,MAAO;AACL,UAAA,SAAA;AAAA,YACE,KAAK,SAAA,CAAU;AAAA,cACb,OAAA,EAAS,KAAA;AAAA,cACT,IAAI,MAAA,CAAO,EAAA;AAAA,cACX,QAAQ,MAAM,aAAA,CAAc,KAAK,MAAA,CAAO,MAAA,EAAQ,OAAO,MAAM;AAAA,aAC9D;AAAA,WACH;AAAA,QACF;AAAA,MACF,CAAA;AAAA,MACA,YAAY,MAAM;AAChB,QAAA,cAAA,EAAA;AACA,QAAA,MAAM,iBAAA,GAAoB,CAAC,GAAG,aAAa,CAAA;AAC3C,QAAA,aAAA,CAAc,KAAA,EAAM;AACpB,QAAA,OAAA,CAAQ,GAAA;AAAA,UACN,CAAC,GAAG,iBAAiB,CAAA,CAAE,GAAA;AAAA,YAAI,CAAC,OAC1B,aAAA,CAAc,WAAA;AAAA,cACZ,0BAAA;AAAA,cACA,qBAAA;AAAA,cACA;AAAA;AACF;AACF,SACF,CACG,KAAA,CAAM,IAAI,CAAA,CACV,IAAA,CAAK,MAAM,KAAA,CAAM,KAAA,EAAM,CAAE,IAAA,CAAK,MAAM,aAAA,CAAc,YAAY,CAAC,CAAA,CAC/D,IAAA,CAAK,MAAO,CAAC,cAAA,GAAiB,aAAA,EAAc,GAAI,IAAK,CAAA,CACrD,KAAA,CAAM,IAAI,CAAA;AAAA,MACf;AAAA,KACF;AAAA,EACF,CAAA;AACF,CAAC,CAAA;AAEH,MAAM,CAAC,UAAU,CAAA,GAAI,MAAA,CAAO;AAAA,EAC1B,KAAA,EAAO,GAAA;AAAA,EACP,SAAA,EAAW,GAAA;AAAA,EACX,SAAA,EAAW,GAAA;AAAA,EACX,WAAA,EAAa,GAAA;AAAA,EACb,MAAM,MAAA,CAAO;AAAA,IACX,IAAA,EAAM,IAAA;AAAA,IACN,QAAA,EAAU,IAAA;AAAA,IACV,MAAA,EAAQ,IAAA;AAAA,IACR,KAAA,EAAO;AAAA,GACR;AACH,CAAC,CAAA;AAEM,MAAM,mBAAA,GAAsB,OACjC,GAAA,EACA,OAAA,GAGK,EAAC,KACH;AACH,EAAA,MAAM,MAAA,GAAS,YAAA,CAAa,qBAAA,CAAsB,GAAA,EAAK,OAAO,CAAC,CAAA;AAC/D,EAAA,MAAM,GAAA,GAAM,OAAO,YAAA,EAAkB;AACrC,EAAA,MAAM,CAAC,eAAA,EAAiB,EAAE,CAAA,GAAI,MAAM,QAAQ,GAAA,CAAI;AAAA,IAC9C,IAAI,KAAA,CAAM,MAAA,CAAO,OAAA,CAAQ,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA,IAC7C,GAAA,CAAI,SAAA,CAAU,QAAA,CAAS,kBAAA;AAAmB,GAC3C,CAAA;AACD,EAAA,MAAM,MAAA,CAAO,SAAS,gBAAA,EAAkB;AAAA,IACtC;AAAA,MACE;AAAA,QACE,eAAA;AAAA,QACA,KAAA;AAAA,UACE,UAAA,CAAW;AAAA,YACT,KAAA,EAAO,CAAA;AAAA,YACP,SAAA,EAAW,CAAA;AAAA,YACX,SAAA,EAAW,CAAA;AAAA,YACX,WAAA,EAAa,CAAA;AAAA,YACb,IAAA,EAAM;AAAA,cACJ,MAAM,EAAA,GAAK,KAAA;AAAA,cACX,QAAA,EAAU,EAAA;AAAA,cACV,MAAA,EAAQ,EAAA;AAAA,cACR,KAAA,EAAO;AAAA;AACT,WACD;AAAA;AACH;AACF;AACF,GACD,CAAA;AACD,EAAA,MAAM,MAAA,CAAO,QAAA,CAAS,cAAA,EAAgB,EAAE,CAAA;AAExC,EAAA,OAAO;AAAA,IACL,GAAG,MAAA;AAAA,IACH;AAAA,GACF;AACF;;;;"}