{"version":3,"file":"get-problems.mjs","sources":["../../src/get-problems.ts"],"sourcesContent":["import { Binary, type HexString } from \"polkadot-api\"\nimport {\n  decAnyMetadata,\n  unifyMetadata,\n  type UnifiedMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { merkleizeMetadata } from \"@polkadot-api/merkleize-metadata\"\nimport { toHex } from \"polkadot-api/utils\"\nimport { lastValueFrom, takeWhile } from \"rxjs\"\nimport { withMetadataHash } from \"./with-metadata-hash\"\nimport { alice } from \"./alice\"\nimport { getChopsticksClient } from \"./chopsticks\"\nimport { Problem } from \"./problems\"\n\nconst DEV_APIS = [\"TryRuntime\", \"Benchmark\"]\n\nexport const getProblems = async (\n  uri: string,\n  options: Partial<{\n    wasm: HexString\n    block: HexString | number\n    token: Partial<{\n      symbol: string\n      decimals: number\n    }>\n  }> = {},\n): Promise<Array<Problem>> => {\n  let client: Awaited<ReturnType<typeof getChopsticksClient>> | undefined =\n    undefined\n  let metadata: UnifiedMetadata\n  let metadataRaw: Uint8Array\n\n  try {\n    client = await getChopsticksClient(uri, options)\n    metadataRaw = await client.getMetadata(\n      (await client.getFinalizedBlock()).hash,\n    )\n    metadata = unifyMetadata(decAnyMetadata(metadataRaw))\n  } catch {\n    try {\n      client?.destroy()\n    } catch {}\n    return [Problem.ANCIENT_METADATA]\n  }\n  try {\n    if (metadata.version < 15) return [Problem.MISSING_MODERN_METADATA]\n\n    const problems: Array<Problem> = []\n    if (!metadata.apis.length) problems.push(Problem.MISSING_RUNTIME_APIS)\n    else if (\n      metadata.apis.some((x) => DEV_APIS.includes(x.name) && x.methods.length)\n    )\n      problems.push(Problem.DEV_APIS_PRESENT)\n\n    let { symbol, decimals } = options.token ?? {}\n\n    if (!symbol || decimals === undefined) {\n      const {\n        properties: { tokenSymbol, tokenDecimals },\n      } = await client.getChainSpecData()\n      symbol ||= tokenSymbol\n      decimals = decimals === undefined ? tokenDecimals : decimals\n    }\n\n    const merkelizerProps = {\n      decimals: decimals!,\n      tokenSymbol: symbol!,\n    }\n\n    const getDiggest = (input: Uint8Array) =>\n      toHex(merkleizeMetadata(input, merkelizerProps).digest())\n\n    if (metadata.version === 16) {\n      const rawMetadata15 = (await client.api.apis.Metadata.metadata_at_version(\n        15,\n      ))!.asBytes()\n      const diggest15 = getDiggest(rawMetadata15)\n      const diggest16 = getDiggest(metadataRaw)\n\n      if (diggest15 !== diggest16) {\n        problems.push(Problem.DIFFERENT_METADATA_HASHES)\n        metadataRaw = rawMetadata15\n      }\n    }\n\n    if (\n      !metadata.extrinsic.signedExtensions.some(\n        (s) => s.identifier === \"CheckMetadataHash\",\n      )\n    ) {\n      problems.push(Problem.MISSING_CHECK_METADATA_HASH_EXTENSION)\n    }\n\n    try {\n      await lastValueFrom(\n        client.api.tx.System.remark({\n          remark: Binary.fromText(\"PAPI Rocks!\"),\n        })\n          .signSubmitAndWatch(\n            withMetadataHash(alice, merkelizerProps, metadataRaw),\n          )\n          .pipe(takeWhile((e) => e.type !== \"broadcasted\")),\n      )\n    } catch {\n      problems.push(Problem.WRONG_OR_MISSING_METADATA_HASH)\n    }\n\n    return problems\n  } finally {\n    client.destroy()\n  }\n}\n"],"names":[],"mappings":"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"}