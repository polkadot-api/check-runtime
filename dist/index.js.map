{"version":3,"file":"index.js","sources":["../src/with-metadata-hash.ts","../src/alice.ts","../src/chopsticks.ts","../src/problems.ts","../src/get-problems.ts"],"sourcesContent":["import { merkleizeMetadata } from \"@polkadot-api/merkleize-metadata\"\nimport type { PolkadotSigner } from \"polkadot-api\"\nimport { mergeUint8 } from \"polkadot-api/utils\"\n\nconst EXTENSION_ID = \"CheckMetadataHash\"\n\nexport const withMetadataHash = (\n  signer: PolkadotSigner,\n  info: { decimals: number; tokenSymbol: string },\n  customMetadata?: Uint8Array,\n): PolkadotSigner => {\n  return {\n    ...signer,\n    signTx: async (callData, extensions, metadata, ...rest) => {\n      const merkleizer = merkleizeMetadata(customMetadata ?? metadata, info)\n\n      return signer.signTx(\n        callData,\n        {\n          ...extensions,\n          [EXTENSION_ID]: {\n            identifier: EXTENSION_ID,\n            value: Uint8Array.from([1]),\n            additionalSigned: mergeUint8([\n              Uint8Array.from([1]),\n              merkleizer.digest(),\n            ]),\n          },\n        },\n        metadata,\n        ...rest,\n      )\n    },\n  }\n}\n","import { sr25519CreateDerive } from \"@polkadot-labs/hdkd\"\nimport {\n  DEV_PHRASE,\n  entropyToMiniSecret,\n  mnemonicToEntropy,\n} from \"@polkadot-labs/hdkd-helpers\"\nimport { AccountId } from \"polkadot-api\"\nimport { getPolkadotSigner } from \"polkadot-api/signer\"\n\nconst entropy = mnemonicToEntropy(DEV_PHRASE)\nconst derive = sr25519CreateDerive(entropyToMiniSecret(entropy))\nconst keyPair = derive(\"//Alice\")\nconst address = AccountId().dec(keyPair.publicKey)\n\nexport const alice = {\n  ...getPolkadotSigner(keyPair.publicKey, \"Sr25519\", keyPair.sign),\n  address,\n}\n","import { type Dot } from \"./types\"\nimport { createClient, type HexString } from \"polkadot-api\"\nimport { alice } from \"./alice\"\nimport { noop, toHex } from \"polkadot-api/utils\"\nimport { getSyncProvider } from \"@polkadot-api/json-rpc-provider-proxy\"\nimport { Struct, u32, u128 } from \"@polkadot-api/substrate-bindings\"\n\nif (typeof process === \"object\" && \"env\" in process)\n  process.env.LOG_LEVEL = \"fatal\"\n\nlet nActiveClients = 0\nconst getChopsticksProvider = (\n  endpoint: string,\n  {\n    wasm,\n    block,\n  }: Partial<{\n    wasm: HexString\n    block: string | number\n  }> = {},\n) =>\n  getSyncProvider(async () => {\n    const { ChopsticksProvider, setup, destroyWorker } = await import(\n      \"@acala-network/chopsticks-core\"\n    )\n    const chain = await setup({ endpoint, block, runtimeLogLevel: 0 })\n    if (wasm) chain.head.setWasm(wasm as any)\n    await chain.api.isReady\n\n    const innerProvider = new ChopsticksProvider(chain)\n    await innerProvider.isReady\n\n    return (onMessage) => {\n      nActiveClients++\n      const subscriptions = new Set<string | number>()\n      return {\n        send: async (message: string) => {\n          const parsed = JSON.parse(message)\n\n          if (parsed.method === \"chainHead_v1_follow\") {\n            const subscription = await innerProvider.subscribe(\n              \"chainHead_v1_followEvent\",\n              parsed.method,\n              parsed.params,\n              (err, result) => {\n                if (err) {\n                  console.error(err)\n                } else\n                  onMessage(\n                    JSON.stringify({\n                      jsonrpc: \"2.0\",\n                      method: \"chainHead_v1_followEvent\",\n                      params: {\n                        subscription,\n                        result,\n                      },\n                    }),\n                  )\n              },\n            )\n            subscriptions.add(subscription)\n\n            onMessage(\n              JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: parsed.id,\n                result: subscription,\n              }),\n            )\n          } else if (parsed.method === \"chainHead_v1_unfollow\") {\n            const id = parsed.params[0]\n            if (subscriptions.has(id)) {\n              subscriptions.delete(id)\n              await innerProvider.unsubscribe(\n                \"chainHead_v1_followEvent\",\n                \"chainHead_v1_unfollow\",\n                id,\n              )\n            }\n          } else {\n            onMessage(\n              JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: parsed.id,\n                result: await innerProvider.send(parsed.method, parsed.params),\n              }),\n            )\n          }\n        },\n        disconnect: () => {\n          nActiveClients--\n          const subscriptionsCopy = [...subscriptions]\n          subscriptions.clear()\n          Promise.all(\n            [...subscriptionsCopy].map((id) =>\n              innerProvider.unsubscribe(\n                \"chainHead_v1_followEvent\",\n                \"chainHead_v1_follow\",\n                id,\n              ),\n            ),\n          )\n            .catch(noop)\n            .then(() => chain.close().then(() => innerProvider.disconnect()))\n            .then(() => (!nActiveClients ? destroyWorker() : null))\n            .catch(noop)\n        },\n      }\n    }\n  })\n\nconst [encAccount] = Struct({\n  nonce: u32,\n  consumers: u32,\n  providers: u32,\n  sufficients: u32,\n  data: Struct({\n    free: u128,\n    reserved: u128,\n    frozen: u128,\n    flags: u128,\n  }),\n})\n\nexport const getChopsticksClient = async (\n  uri: string,\n  options: Partial<{\n    wasm: HexString\n    block: string | number\n  }> = {},\n) => {\n  const client = createClient(getChopsticksProvider(uri, options))\n  const api = client.getUnsafeApi<Dot>()\n  const [aliceStorageKey, ed] = await Promise.all([\n    api.query.System.Account.getKey(alice.address),\n    api.constants.Balances.ExistentialDeposit(),\n  ])\n  await client._request(\"dev_setStorage\", [\n    [\n      [\n        aliceStorageKey,\n        toHex(\n          encAccount({\n            nonce: 1,\n            consumers: 1,\n            providers: 1,\n            sufficients: 0,\n            data: {\n              free: ed * 1_000n,\n              reserved: 0n,\n              frozen: 0n,\n              flags: 170141183460469231731687303715884105728n,\n            },\n          }),\n        ),\n      ],\n    ],\n  ])\n  await client._request(\"dev_newBlock\", [])\n\n  return {\n    ...client,\n    api,\n  }\n}\n","export const Problem = {\n  ANCIENT_METADATA: \"ANCIENT_METADATA\",\n  MISSING_MODERN_METADATA: \"MISSING_MODERN_METADATA\",\n  MISSING_RUNTIME_APIS: \"MISSING_RUNTIME_APIS\",\n  DEV_APIS_PRESENT: \"DEV_APIS_PRESENT\",\n  MISSING_CHECK_METADATA_HASH_EXTENSION:\n    \"MISSING_CHECK_METADATA_HASH_EXTENSION\",\n  DIFFERENT_METADATA_HASHES: \"DIFFERENT_METADATA_HASHES\",\n  WRONG_OR_MISSING_METADATA_HASH: \"WRONG_OR_MISSING_METADATA_HASH\",\n} as const\n\nexport type Problem = (typeof Problem)[keyof typeof Problem]\n","import { Binary, type HexString } from \"polkadot-api\"\nimport {\n  decAnyMetadata,\n  unifyMetadata,\n  type UnifiedMetadata,\n} from \"@polkadot-api/substrate-bindings\"\nimport { merkleizeMetadata } from \"@polkadot-api/merkleize-metadata\"\nimport { toHex } from \"polkadot-api/utils\"\nimport { lastValueFrom, takeWhile } from \"rxjs\"\nimport { withMetadataHash } from \"./with-metadata-hash\"\nimport { alice } from \"./alice\"\nimport { getChopsticksClient } from \"./chopsticks\"\nimport { Problem } from \"./problems\"\n\nconst DEV_APIS = [\"TryRuntime\", \"Benchmark\"]\n\nexport const getProblems = async (\n  uri: string,\n  options: Partial<{\n    wasm: HexString\n    block: HexString | number\n    token: Partial<{\n      symbol: string\n      decimals: number\n    }>\n  }> = {},\n): Promise<Array<Problem>> => {\n  let client: Awaited<ReturnType<typeof getChopsticksClient>> | undefined =\n    undefined\n  let metadata: UnifiedMetadata\n  let metadataRaw: Uint8Array\n\n  try {\n    client = await getChopsticksClient(uri, options)\n    metadataRaw = await client.getMetadata(\n      (await client.getFinalizedBlock()).hash,\n    )\n    metadata = unifyMetadata(decAnyMetadata(metadataRaw))\n  } catch {\n    try {\n      client?.destroy()\n    } catch {}\n    return [Problem.ANCIENT_METADATA]\n  }\n  try {\n    if (metadata.version < 15) return [Problem.MISSING_MODERN_METADATA]\n\n    const problems: Array<Problem> = []\n    if (!metadata.apis.length) problems.push(Problem.MISSING_RUNTIME_APIS)\n    else if (\n      metadata.apis.some((x) => DEV_APIS.includes(x.name) && x.methods.length)\n    )\n      problems.push(Problem.DEV_APIS_PRESENT)\n\n    let { symbol, decimals } = options.token ?? {}\n\n    if (!symbol || decimals === undefined) {\n      const {\n        properties: { tokenSymbol, tokenDecimals },\n      } = await client.getChainSpecData()\n      symbol ||= tokenSymbol\n      decimals = decimals === undefined ? tokenDecimals : decimals\n    }\n\n    const merkelizerProps = {\n      decimals: decimals!,\n      tokenSymbol: symbol!,\n    }\n\n    const getDiggest = (input: Uint8Array) =>\n      toHex(merkleizeMetadata(input, merkelizerProps).digest())\n\n    if (metadata.version === 16) {\n      const rawMetadata15 = (await client.api.apis.Metadata.metadata_at_version(\n        15,\n      ))!.asBytes()\n      const diggest15 = getDiggest(rawMetadata15)\n      const diggest16 = getDiggest(metadataRaw)\n\n      if (diggest15 !== diggest16) {\n        problems.push(Problem.DIFFERENT_METADATA_HASHES)\n        metadataRaw = rawMetadata15\n      }\n    }\n\n    if (\n      !metadata.extrinsic.signedExtensions.some(\n        (s) => s.identifier === \"CheckMetadataHash\",\n      )\n    ) {\n      problems.push(Problem.MISSING_CHECK_METADATA_HASH_EXTENSION)\n    }\n\n    try {\n      await lastValueFrom(\n        client.api.tx.System.remark({\n          remark: Binary.fromText(\"PAPI Rocks!\"),\n        })\n          .signSubmitAndWatch(\n            withMetadataHash(alice, merkelizerProps, metadataRaw),\n          )\n          .pipe(takeWhile((e) => e.type !== \"broadcasted\")),\n      )\n    } catch {\n      problems.push(Problem.WRONG_OR_MISSING_METADATA_HASH)\n    }\n\n    return problems\n  } finally {\n    client.destroy()\n  }\n}\n"],"names":["merkleizeMetadata","mergeUint8","mnemonicToEntropy","DEV_PHRASE","sr25519CreateDerive","entropyToMiniSecret","AccountId","getPolkadotSigner","getSyncProvider","noop","Struct","u32","u128","createClient","toHex","unifyMetadata","decAnyMetadata","lastValueFrom","Binary","takeWhile"],"mappings":"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"}